.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "POD2::JA::Unicode::LineBreak 3"
.TH POD2::JA::Unicode::LineBreak 3 "2017-04-11" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Unicode::LineBreak~[ja] \- UAX #14 Unicode 行分割アルゴリズム
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Unicode::LineBreak;
\&    $lb = Unicode::LineBreak\->new();
\&    $broken = $lb\->break($string);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Unicode::LineBreak は、Unicode 標準の附属書14 [\s-1UAX\s0 #14] で述べる Unicode 行分割アルゴリズムを実行する。
分割位置を決定する際に、附属書11 [\s-1UAX\s0 #11] で定義される East_Asian_Width 参考特性も考慮する。
.SS "用語"
.IX Subsection "用語"
便宜的に以下の用語を使う。
.PP
\&\fB強制分割\fR〔mandatory break〕は、基本規則で定められており、周囲の文字に関係なく義務的に実行される行分割動作。
\&\fB任意分割\fRは、基本規則で認められており、ユーザが実行すると決めた場合に行われる行分割動作。
[\s-1UAX\s0 #14] で定義される任意分割には\fB直接分割\fR〔direct break〕と\fB間接分割\fR〔indirect break〕とがある。
.PP
\&\fB音素文字的な文字\fR〔alphabetic characters〕は、通常、他の文字が分割の機会を与えないかぎり、文字同士の間で行分割できない文字。
\&\fB表語文字的な文字\fR〔ideographic characters〕は、通常、その前後で行分割できる文字。
[\s-1UAX\s0 #14] では音素文字的な文字のほとんどを \s-1AL\s0 に、表語文字的な文字のほとんどを \s-1ID\s0 に分類している
(これらの用語は文字学の観点からすれば不正確である)。
若干の用字系では、個々の文字からは分割位置が明確にならないため、辞書による発見的方法を用いる。
.PP
文字列の\fB桁数\fRは、文字列に含まれる文字の数と等しいとはかぎらない。
個々の文字は\fB広い\fR〔wide〕か、\fB狭い\fR〔narrow〕か、前進を伴わない〔nonspacing〕かのいずれかであり、各々 2 桁、1 桁、0 桁を占める。
若干の文字は、使われる文脈によって広くも狭くもなり得る。
カスタマイズによって、文字はより多様な幅を持ちうる。
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "行の分割"
.IX Subsection "行の分割"
.IP "new ([\s-1KEY\s0 => \s-1VALUE, ...\s0])" 4
.IX Item "new ([KEY => VALUE, ...])"
\&\fIコンストラクタ\fR。
\&\s-1KEY\s0 => \s-1VALUE\s0 の対については \*(L"オプション\*(R" を参照。
.IP "break (\s-1STRING\s0)" 4
.IX Item "break (STRING)"
\&\fIインスタンスメソッド\fR。
Unicode 文字列 \s-1STRING\s0 を分割し、それを返す。
配列コンテクストでは、結果の各行の配列を返す。
.IP "break_partial (\s-1STRING\s0)" 4
.IX Item "break_partial (STRING)"
\&\fIインスタンスメソッド\fR。
\&\fIbreak()\fR と同じだが、文字列を少しずつ追加して入力する場合。
入力が完了したことを示すには、STRING 引数に \f(CW\*(C`undef\*(C'\fR を与える。
.IP "config (\s-1KEY\s0)" 4
.IX Item "config (KEY)"
.PD 0
.IP "config (\s-1KEY\s0 => \s-1VALUE, ...\s0)" 4
.IX Item "config (KEY => VALUE, ...)"
.PD
\&\fIインスタンスメソッド\fR。
設定を取得または変更する。
\&\s-1KEY\s0 => \s-1VALUE\s0 の対については \*(L"オプション\*(R" を参照。
.IP "copy" 4
.IX Item "copy"
\&\fIコピーコンストラクタ\fR。
オブジェクトインスタンスの複製をつくる。
.SS "情報の取得"
.IX Subsection "情報の取得"
.IP "breakingRule (\s-1BEFORESTR, AFTERSTR\s0)" 4
.IX Item "breakingRule (BEFORESTR, AFTERSTR)"
\&\fIインスタンスメソッド\fR。
文字列 \s-1BEFORESTR\s0 と \s-1AFTERSTR\s0 の間での行分割動作を得る。
返値については \*(L"定数\*(R" を参照。
.Sp
\&\fB注\fR:
このメソッドは、行分割のおおまかな動作を表す値を返すにすぎない。
実際のテキストを行折りするには、\fIbreak()\fR 等のメソッドを使ってほしい。
.IP "context ([Charset => \s-1CHARSET\s0], [Language => \s-1LANGUAGE\s0])" 4
.IX Item "context ([Charset => CHARSET], [Language => LANGUAGE])"
\&\fI関数\fR。
キャラクタセット \s-1CHARSET\s0 および言語コード \s-1LANGUAGE\s0 から、それを使う言語/地域の文脈を得る。
.SS "オプション"
.IX Subsection "オプション"
\&\*(L"new\*(R"、\*(L"config\*(R" の両メソッドには以下の対を指定できる。
桁数の算出 ([\fBE\fR])、書記素クラスタ分節 ([\fBG\fR])
(Unicode::GCString~[ja] も参照)、行分割動作 ([\fBL\fR])
に影響するものがある。
.ie n .IP "BreakIndent => ""YES"" | ""NO""" 4
.el .IP "BreakIndent => \f(CW``YES''\fR | \f(CW``NO''\fR" 4
.IX Item "BreakIndent => ""YES"" | ""NO"""
[\fBL\fR]
行頭の \s-1SPACE\s0 の並び (インデント) の後では常に分割を許す。
[\s-1UAX\s0 #14] は \s-1SPACE\s0 のこのような用法を考慮していない。
初期値は \f(CW"YES"\fR。
.Sp
\&\fB注\fR:
このオプションはリリース 1.011 で導入された。
.IP "CharMax => \s-1NUMBER\s0" 4
.IX Item "CharMax => NUMBER"
[\fBL\fR]
行に含みうる最大の文字数。行末の空白文字と改行の文字列を除く。
文字数は一般に行の長さを表さないことに注意。
初期値は \f(CW998\fR。
\&\f(CW0\fR にはできない。
.IP "ColMin => \s-1NUMBER\s0" 4
.IX Item "ColMin => NUMBER"
[\fBL\fR]
任意分割された行の、改行の文字列と行末の空白文字を含めない最小桁数。
初期値は \f(CW0\fR。
.IP "ColMax => \s-1NUMBER\s0" 4
.IX Item "ColMax => NUMBER"
[\fBL\fR]
行の、改行の文字列と行末の空白文字を含めない最大桁数。つまり、行の最大長。
初期値は \f(CW76\fR。
.PP
\&\*(L"Urgent\*(R" オプションおよび \*(L"ユーザ定義の行分割動作\*(R" も参照。
.ie n .IP "ComplexBreaking => ""YES"" | ""NO""" 4
.el .IP "ComplexBreaking => \f(CW``YES''\fR | \f(CW``NO''\fR" 4
.IX Item "ComplexBreaking => ""YES"" | ""NO"""
[\fBL\fR]
東南アジアの複雑な文脈で、発見的な行折りを行う。
初期値は、東南アジアの表記体系での単語分節が有効なら \f(CW"YES"\fR。
.IP "Context => \s-1CONTEXT\s0" 4
.IX Item "Context => CONTEXT"
[\fBE\fR][\fBL\fR]
言語/地域の文脈を指定する。
現在使える文脈は \f(CW"EASTASIAN"\fR か \f(CW"NONEASTASIAN"\fR。
初期の文脈は \f(CW"NONEASTASIAN"\fR。
.Sp
\&\f(CW"EASTASIAN"\fR 文脈では、East_Asian_Width 特性が曖昧 (A)
であれば「広い」文字とみなし、行分割特性が \s-1AI\s0 であれば表語文字的 (\s-1ID\s0)
とみなす。
.Sp
\&\f(CW"NONEASTASIAN"\fR 文脈では、East_Asian_Width 特性が曖昧 (A)
であれば「狭い」文字とみなし、行分割特性が \s-1AI\s0 であれば音素文字的 (\s-1AL\s0)
とみなす。
.ie n .IP "EAWidth => ""["" \s-1ORD\s0 ""=>"" \s-1PROPERTY\s0 ""]""" 4
.el .IP "EAWidth => \f(CW[\fR \s-1ORD\s0 \f(CW=>\fR \s-1PROPERTY\s0 \f(CW]\fR" 4
.IX Item "EAWidth => [ ORD => PROPERTY ]"
.PD 0
.ie n .IP "EAWidth => ""undef""" 4
.el .IP "EAWidth => \f(CWundef\fR" 4
.IX Item "EAWidth => undef"
.PD
[\fBE\fR]
個々の文字の East_Asian_Width 特性を手直しする。
\&\s-1ORD\s0 は文字の \s-1UCS\s0 インデクス値か、それらの配列への参照。
\&\s-1PROPERTY\s0 は East_Asian_Width 特性値か拡張値のいずれか (\*(L"定数\*(R" を参照)。
このオプションは複数回指定できる。
\&\f(CW\*(C`undef\*(C'\fR を指定すると、それまでの手直しをすべて取り消す。
.Sp
初期値では、East_Asian_width 特性の手直しはしない。
\&\*(L"文字の特性の手直し\*(R" も参照。
.IP "Format => \s-1METHOD\s0" 4
.IX Item "Format => METHOD"
[\fBL\fR]
分割した行を整形する方法を指定する。
.RS 4
.ie n .IP """SIMPLE""" 4
.el .IP "\f(CW``SIMPLE''\fR" 4
.IX Item """SIMPLE"""
初期の方法。
任意分割の位置に改行を挿入するだけ。
.ie n .IP """NEWLINE""" 4
.el .IP "\f(CW``NEWLINE''\fR" 4
.IX Item """NEWLINE"""
\&\*(L"Newline\*(R" オプションで指定したもので改行を置き換える。
改行の前とテキスト終端の空白文字を除去する。
テキスト終端に改行がなければ追加する。
.ie n .IP """TRIM""" 4
.el .IP "\f(CW``TRIM''\fR" 4
.IX Item """TRIM"""
任意分割の位置に改行を挿入する。
改行の前の空白文字を除去する。
.ie n .IP """undef""" 4
.el .IP "\f(CWundef\fR" 4
.IX Item "undef"
なにもしない (改行の挿入も)。
.IP "サブルーチンへの参照" 4
.IX Item "サブルーチンへの参照"
\&\*(L"行の整形\*(R" を参照。
.RE
.RS 4
.RE
.ie n .IP "HangulAsAL => ""YES"" | ""NO""" 4
.el .IP "HangulAsAL => \f(CW``YES''\fR | \f(CW``NO''\fR" 4
.IX Item "HangulAsAL => ""YES"" | ""NO"""
[\fBL\fR]
ハングル音節とハングル連結チャモ〔conjoining jamo〕を音素文字的な文字 (\s-1AL\s0) と扱う。
初期値は \f(CW"NO"\fR。
.ie n .IP "LBClass => ""["" \s-1ORD\s0 ""=>"" \s-1CLASS\s0 ""]""" 4
.el .IP "LBClass => \f(CW[\fR \s-1ORD\s0 \f(CW=>\fR \s-1CLASS\s0 \f(CW]\fR" 4
.IX Item "LBClass => [ ORD => CLASS ]"
.PD 0
.ie n .IP "LBClass => ""undef""" 4
.el .IP "LBClass => \f(CWundef\fR" 4
.IX Item "LBClass => undef"
.PD
[\fBG\fR][\fBL\fR]
個々の文字の行分割特性 (分類) を手直しする。
\&\s-1ORD\s0 は文字の \s-1UCS\s0 インデクス値か、それらの配列への参照。
\&\s-1CLASS\s0 は行分割特性値のいずれか (\*(L"定数\*(R" を参照)。
このオプションは複数回指定できる。
\&\f(CW\*(C`undef\*(C'\fR を指定すると、それまでの手直しをすべて取り消す。
.Sp
初期値では、行分割特性の手直しはしない。
\&\*(L"文字の特性の手直し\*(R" も参照。
.ie n .IP "LegacyCM => ""YES"" | ""NO""" 4
.el .IP "LegacyCM => \f(CW``YES''\fR | \f(CW``NO''\fR" 4
.IX Item "LegacyCM => ""YES"" | ""NO"""
[\fBG\fR][\fBL\fR]
前に空白文字がついた結合文字を単独の結合文字 (\s-1ID\s0) と扱う。
Unicode 5.0 版からは、空白文字のこのような使いかたは推奨されない。
初期値は \f(CW"YES"\fR。
.IP "Newline => \s-1STRING\s0" 4
.IX Item "Newline => STRING"
[\fBL\fR]
改行の文字列とする Unicode 文字列。
初期値は \f(CW"\en"\fR。
.IP "Prep => \s-1METHOD\s0" 4
.IX Item "Prep => METHOD"
[\fBL\fR]
ユーザ定義の行分割動作を追加する。
このオプションは複数回指定できる。
\&\s-1METHOD\s0 には以下のものを指定できる。
.RS 4
.ie n .IP """NONBREAKURI""" 4
.el .IP "\f(CW``NONBREAKURI''\fR" 4
.IX Item """NONBREAKURI"""
\&\s-1URI\s0 を分割しない。
.ie n .IP """BREAKURI""" 4
.el .IP "\f(CW``BREAKURI''\fR" 4
.IX Item """BREAKURI"""
\&\s-1URI\s0 を、印刷物に適した規則で分割する。
詳しくは [\s-1CMOS\s0] の 6.17 節と 17.11 節を参照。
.ie n .IP """["" \s-1REGEX, SUBREF\s0 ""]""" 4
.el .IP "\f(CW[\fR \s-1REGEX, SUBREF\s0 \f(CW]\fR" 4
.IX Item "[ REGEX, SUBREF ]"
正規表現 \s-1REGEX\s0 にマッチする文字列を、SUBREF で参照されるサブルーチンで分割する。
詳細は \*(L"ユーザ定義の行分割動作\*(R" を参照。
.ie n .IP """undef""" 4
.el .IP "\f(CWundef\fR" 4
.IX Item "undef"
それまでに追加した動作をすべて取り消す。
.RE
.RS 4
.RE
.IP "Sizing => \s-1METHOD\s0" 4
.IX Item "Sizing => METHOD"
[\fBL\fR]
文字列の長さを算出する方法を指定する。
以下のオプションが使える。
.RS 4
.ie n .IP """UAX11""" 4
.el .IP "\f(CW``UAX11''\fR" 4
.IX Item """UAX11"""
初期の方法。
組み込みの文字データベースによって文字の桁数を算出する。
.ie n .IP """undef""" 4
.el .IP "\f(CWundef\fR" 4
.IX Item "undef"
文字列に含まれる書記素クラスタ (Unicode::GCString 参照) の数を返す。
.IP "サブルーチンへの参照" 4
.IX Item "サブルーチンへの参照"
\&\*(L"文字列長の算出\*(R" を参照。
.RE
.RS 4
.Sp
\&\*(L"ColMax\*(R"、\*(L"ColMin\*(R"、\*(L"EAWidth\*(R" オプションも参照。
.RE
.IP "Urgent => \s-1METHOD\s0" 4
.IX Item "Urgent => METHOD"
[\fBL\fR]
長すぎる行の扱いかたを指定する。
以下のオプションが使える。
.RS 4
.ie n .IP """CROAK""" 4
.el .IP "\f(CW``CROAK''\fR" 4
.IX Item """CROAK"""
エラーメッセージを出力して死ぬ。
.ie n .IP """FORCE""" 4
.el .IP "\f(CW``FORCE''\fR" 4
.IX Item """FORCE"""
長すぎる文字列を無理やり分割する。
.ie n .IP """undef""" 4
.el .IP "\f(CWundef\fR" 4
.IX Item "undef"
初期の方法。
長すぎる文字列も分割しない。
.IP "サブルーチンへの参照" 4
.IX Item "サブルーチンへの参照"
\&\*(L"ユーザ定義の行分割動作\*(R" を参照。
.RE
.RS 4
.RE
.ie n .IP "ViramaAsJoiner => ""YES"" | ""NO""" 4
.el .IP "ViramaAsJoiner => \f(CW``YES''\fR | \f(CW``NO''\fR" 4
.IX Item "ViramaAsJoiner => ""YES"" | ""NO"""
[\fBG\fR]
ヴィラーマ記号 (ヒンディ語では「ハラント」、クメール文字での「脚」)
とそれに続く字とを分離しない。
初期値は \f(CW"YES"\fR。
\&\fB注\fR:
このオプションはリリース 2011.001_29 で導入された。
以前のリリースでは \f(CW"NO"\fR に固定であった。
これは、[\s-1UAX\s0 #29] で定義する「初期の」書記素クラスタには含まれない仕様である。
.SS "定数"
.IX Subsection "定数"
.ie n .IP """EA_Na"", ""EA_N"", ""EA_A"", ""EA_W"", ""EA_H"", ""EA_F""" 4
.el .IP "\f(CWEA_Na\fR, \f(CWEA_N\fR, \f(CWEA_A\fR, \f(CWEA_W\fR, \f(CWEA_H\fR, \f(CWEA_F\fR" 4
.IX Item "EA_Na, EA_N, EA_A, EA_W, EA_H, EA_F"
[\s-1UAX\s0 #11] で定義される 6 つの East_Asian_Width 特性値。
狭 (Na)、中立 (N)、曖昧 (A)、広 (W)、半角 (H)、全角 (F)。
.ie n .IP """EA_Z""" 4
.el .IP "\f(CWEA_Z\fR" 4
.IX Item "EA_Z"
前進を伴わない文字の East_Asian_Width 特性の値。
.Sp
\&\fB注\fR:
この「前進を伴わない」値は当モジュールによる拡張であり、
[\s-1UAX\s0 #11] の一部ではない。
.ie n .IP """LB_BK"", ""LB_CR"", ""LB_LF"", ""LB_NL"", ""LB_SP"", ""LB_OP"", ""LB_CL"", ""LB_CP"", ""LB_QU"", ""LB_GL"", ""LB_NS"", ""LB_EX"", ""LB_SY"", ""LB_IS"", ""LB_PR"", ""LB_PO"", ""LB_NU"", ""LB_AL"", ""LB_HL"", ""LB_ID"", ""LB_IN"", ""LB_HY"", ""LB_BA"", ""LB_BB"", ""LB_B2"", ""LB_CB"", ""LB_ZW"", ""LB_CM"", ""LB_WJ"", ""LB_H2"", ""LB_H3"", ""LB_JL"", ""LB_JV"", ""LB_JT"", ""LB_SG"", ""LB_AI"", ""LB_CJ"", ""LB_SA"", ""LB_XX"", ""LB_RI""" 4
.el .IP "\f(CWLB_BK\fR, \f(CWLB_CR\fR, \f(CWLB_LF\fR, \f(CWLB_NL\fR, \f(CWLB_SP\fR, \f(CWLB_OP\fR, \f(CWLB_CL\fR, \f(CWLB_CP\fR, \f(CWLB_QU\fR, \f(CWLB_GL\fR, \f(CWLB_NS\fR, \f(CWLB_EX\fR, \f(CWLB_SY\fR, \f(CWLB_IS\fR, \f(CWLB_PR\fR, \f(CWLB_PO\fR, \f(CWLB_NU\fR, \f(CWLB_AL\fR, \f(CWLB_HL\fR, \f(CWLB_ID\fR, \f(CWLB_IN\fR, \f(CWLB_HY\fR, \f(CWLB_BA\fR, \f(CWLB_BB\fR, \f(CWLB_B2\fR, \f(CWLB_CB\fR, \f(CWLB_ZW\fR, \f(CWLB_CM\fR, \f(CWLB_WJ\fR, \f(CWLB_H2\fR, \f(CWLB_H3\fR, \f(CWLB_JL\fR, \f(CWLB_JV\fR, \f(CWLB_JT\fR, \f(CWLB_SG\fR, \f(CWLB_AI\fR, \f(CWLB_CJ\fR, \f(CWLB_SA\fR, \f(CWLB_XX\fR, \f(CWLB_RI\fR" 4
.IX Item "LB_BK, LB_CR, LB_LF, LB_NL, LB_SP, LB_OP, LB_CL, LB_CP, LB_QU, LB_GL, LB_NS, LB_EX, LB_SY, LB_IS, LB_PR, LB_PO, LB_NU, LB_AL, LB_HL, LB_ID, LB_IN, LB_HY, LB_BA, LB_BB, LB_B2, LB_CB, LB_ZW, LB_CM, LB_WJ, LB_H2, LB_H3, LB_JL, LB_JV, LB_JT, LB_SG, LB_AI, LB_CJ, LB_SA, LB_XX, LB_RI"
[\s-1UAX\s0 #14] で定義される 40 の行分割特性値 (分類)。
.Sp
\&\fB注\fR:
特性値 \s-1CP\s0 はUnicode 5.2.0版で導入された。
特性値 \s-1HL\s0 と \s-1CJ\s0 はUnicode 6.1.0版で導入された。
特性値 \s-1RI\s0 は Unicode 6.2.0版で導入された。
.ie n .IP """MANDATORY"", ""DIRECT"", ""INDIRECT"", ""PROHIBITED""" 4
.el .IP "\f(CWMANDATORY\fR, \f(CWDIRECT\fR, \f(CWINDIRECT\fR, \f(CWPROHIBITED\fR" 4
.IX Item "MANDATORY, DIRECT, INDIRECT, PROHIBITED"
行分割動作を表す 4 つの値。
強制分割。直接分割も間接分割も認める。間接分割を認めるが直接分割は禁ずる。分割を禁ずる。
.ie n .IP """Unicode::LineBreak::SouthEastAsian::supported""" 4
.el .IP "\f(CWUnicode::LineBreak::SouthEastAsian::supported\fR" 4
.IX Item "Unicode::LineBreak::SouthEastAsian::supported"
東南アジアの表記体系のための単語分節機能が有効かどうかを示すフラグ。
この機能が有効になっていれば、空でない文字列。
そうでなければ \f(CW\*(C`undef\*(C'\fR。
.Sp
\&\fB注\fR: 現リリースでは現代タイ語のタイ文字にのみ対応している。
.ie n .IP """UNICODE_VERSION""" 4
.el .IP "\f(CWUNICODE_VERSION\fR" 4
.IX Item "UNICODE_VERSION"
このモジュールが参照する Unicode 標準の版を示す文字列。
.SH "CUSTOMIZATION"
.IX Header "CUSTOMIZATION"
.SS "行の整形"
.IX Subsection "行の整形"
\&\*(L"Format\*(R" オプションにサブルーチンへの参照を指定する場合、そのサブルーチンは 3 つの引数を取らなければならない。
.PP
.Vb 1
\&    $修正後 = &サブルーチン(SELF, EVENT, STR);
.Ve
.PP
\&\s-1SELF\s0 は Unicode::LineBreak オブジェクト、EVENT はサブルーチンが呼ばれた文脈を表す文字列、STR は分割位置の前または後の Unicode 文字列の断片。
.PP
.Vb 10
\&    EVENT |駆動の契機           |STR
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    "sot" |テキスト先頭         |最初の行の断片
\&    "sop" |強制分割の後         |次の行の断片
\&    "sol" |任意分割の後         |続きの行の断片
\&    ""    |分割の直前           |行全体 (終端の空白文字を除く)
\&    "eol" |任意分割             |分割位置の前の空白文字
\&    "eop" |強制分割             |改行とその前の空白文字
\&    "eot" |テキスト終端         |テキスト終端の空白文字 (と改行)
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
サブルーチンは、テキストの断片を修正して返さなければならない。なにも修正しなかったことを示すには、\f(CW\*(C`undef\*(C'\fR を返せばよい。
なお、\f(CW"sot"\fR、\f(CW"sop"\fR、\f(CW"sol"\fR の文脈での修正はその後の分割位置の決定に影響するが、ほかの文脈での修正は影響しない。
.PP
\&\fB注意\fR:
文字列の引数は実際には書記素クラスタ列である。
Unicode::GCString~[ja] 参照。
.PP
たとえば次のコードは、行末の空白を取り除いて行折りをする。
.PP
.Vb 8
\&    sub fmt {
\&        if ($_[1] =~ /^eo/) {
\&            return "\en";
\&        }
\&        return undef;
\&    }
\&    my $lb = Unicode::LineBreak\->new(Format => \e&fmt);
\&    $output = $lb\->break($text);
.Ve
.SS "ユーザ定義の行分割動作"
.IX Subsection "ユーザ定義の行分割動作"
任意分割によって生じる行が CharMax、ColMax、ColMin のいずれかの制限を超えると見込まれるときは、引き続く文字列に対して\fB緊急分割\fRを実行できる。
\&\*(L"Urgent\*(R" オプションにサブルーチンへの参照を指定する場合、そのサブルーチンは 2 つの引数を取らなければならない。
.PP
.Vb 1
\&    @分割後 = &サブルーチン(SELF, STR);
.Ve
.PP
\&\s-1SELF\s0 は Unicode::LineBreak オブジェクト、STR は分割すべき Unicode 文字列。
.PP
サブルーチンは、文字列 \s-1STR\s0 を分割した結果の配列を返さなければならない。
.PP
\&\fB注意\fR:
文字列の引数は実際には書記素クラスタ列である。
Unicode::GCString~[ja] 参照。
.PP
たとえば次のコードは、若干の化学物質 (チチンのような) の名称にハイフンを挿入し、行折りできるようにする。
.PP
.Vb 5
\&    sub hyphenize {
\&        return map {$_ =~ s/yl$/yl\-/; $_} split /(\ew+?yl(?=\ew))/, $_[1];
\&    }
\&    my $lb = Unicode::LineBreak\->new(Urgent => \e&hyphenize);
\&    $output = $lb\->break("Methionylthreonylthreonylglutaminylarginyl...");
.Ve
.PP
\&\*(L"Prep\*(R" オプションに [\s-1REGEX, SUBREF\s0] の配列参照を指定する場合、サブルーチンは 2 つの引数を取らなければならない。
.PP
.Vb 1
\&    @分割後 = &サブルーチン(SELF, STR);
.Ve
.PP
\&\s-1SELF\s0 は Unicode::LineBreak オブジェクト、STR は \s-1REGEX\s0 にマッチする分割すべき Unicode 文字列。
.PP
サブルーチンは、文字列 \s-1STR\s0 を分割した結果の配列を返さなければならない。
.PP
たとえば次のコードは、HTTP \s-1URL\s0 を [\s-1CMOS\s0] の規則を用いて分割する。
.PP
.Vb 10
\&    my $url = qr{http://[\ex21\-\ex7E]+}i;
\&    sub breakurl {
\&        my $self = shift;
\&        my $str = shift;
\&        return split m{(?<=[/]) (?=[^/]) |
\&                       (?<=[^\-.]) (?=[\-~.,_?\e#%=&]) |
\&                       (?<=[=&]) (?=.)}x, $str;
\&    }
\&    my $lb = Unicode::LineBreak\->new(Prep => [$url, \e&breakurl]);
\&    $output = $lb\->break($string);
.Ve
.PP
\fI状態の保存\fR
.IX Subsection "状態の保存"
.PP
Unicode::LineBreak オブジェクトはハッシュ参照としてふるまう。
任意の要素を、オブジェクトの存在期間中保存できる。
.PP
たとえば次のコードは、段落を空行で分ける。
.PP
.Vb 4
\&    sub paraformat {
\&        my $self = shift;
\&        my $action = shift;
\&        my $str = shift;
\&        
\&        if ($action eq \*(Aqsot\*(Aq or $action eq \*(Aqsop\*(Aq) {
\&            $self\->{\*(Aqline\*(Aq} = \*(Aq\*(Aq;
\&        } elsif ($action eq \*(Aq\*(Aq) {
\&            $self\->{\*(Aqline\*(Aq} = $str;
\&        } elsif ($action eq \*(Aqeol\*(Aq) {
\&            return "\en";
\&        } elsif ($action eq \*(Aqeop\*(Aq) {
\&            if (length $self\->{\*(Aqline\*(Aq}) {
\&                return "\en\en";
\&            } else {
\&                return "\en";
\&            }
\&        } elsif ($action eq \*(Aqeot\*(Aq) {
\&            return "\en";
\&        }
\&        return undef;
\&    }
\&    my $lb = Unicode::LineBreak\->new(Format => \e&paraformat);
\&    $output = $lb\->break($string);
.Ve
.SS "文字列長の算出"
.IX Subsection "文字列長の算出"
\&\*(L"Sizing\*(R" オプションにサブルーチンへの参照を指定する場合、そのサブルーチンは 5 つの引数を取らなければならない。
.PP
.Vb 1
\&    $桁数 = &サブルーチン(SELF, LEN, PRE, SPC, STR);
.Ve
.PP
\&\s-1SELF\s0 は Unicode::LineBreak オブジェクト、LEN は先行する文字列の長さ、PRE は先行する Unicode 文字列、SPC は追加される空白文字、STR は処理する Unicode 文字列。
.PP
サブルーチンは \f(CW\*(C`PRE.SPC.STR\*(C'\fR の桁数を算出して返さなければならない。
桁数は整数でなくてもよい。桁数の単位は随意に選べるが、\*(L"ColMin\*(R" オプションおよび \*(L"ColMax\*(R" オプションのそれと一致させなければならない。
.PP
\&\fB注意\fR:
文字列の引数は実際には書記素クラスタ列である。
Unicode::GCString~[ja] 参照。
.PP
たとえば次のコードは、行に 8 桁ごとのタブストップがあるものとして処理する。
.PP
.Vb 2
\&    sub tabbedsizing {
\&        my ($self, $cols, $pre, $spc, $str) = @_;
\&     
\&        my $spcstr = $spc.$str;
\&        while ($spcstr\->lbc == LB_SP) {
\&            my $c = $spcstr\->item(0);
\&            if ($c eq "\et") {
\&                $cols += 8 \- $cols % 8;
\&            } else {
\&                $cols += $c\->columns;
\&            }
\&            $spcstr = $spcstr\->substr(1);
\&        }
\&        $cols += $spcstr\->columns;
\&        return $cols;
\&    };
\&    my $lb = Unicode::LineBreak\->new(LBClass => [ord("\et") => LB_SP],
\&                                     Sizing => \e&tabbedsizing);
\&    $output = $lb\->break($string);
.Ve
.SS "文字の特性の手直し"
.IX Subsection "文字の特性の手直し"
\&\*(L"LBClass\*(R" オプションおよび \*(L"EAWidth\*(R" オプションで個々の文字の行分割特性 (分類) や East_Asian_Width 特性を手直しできる。その際に便利な定数をいくつか定義してある。
.PP
\fI行分割特性\fR
.IX Subsection "行分割特性"
.PP
仮名などの行頭禁則文字
.IX Subsection "仮名などの行頭禁則文字"
.PP
初期値では、若干の仮名や仮名に準ずるものを行頭禁則文字 (\s-1NS\s0 または \s-1CJ\s0) と扱う。
以下の対を LBClass オプションに指定すれば、これらの文字を通常の表語文字的な文字 (\s-1ID\s0) と扱える。
.ie n .IP """KANA_NONSTARTERS() => LB_ID""" 4
.el .IP "\f(CWKANA_NONSTARTERS() => LB_ID\fR" 4
.IX Item "KANA_NONSTARTERS() => LB_ID"
下記の文字すべて。
.ie n .IP """IDEOGRAPHIC_ITERATION_MARKS() => LB_ID""" 4
.el .IP "\f(CWIDEOGRAPHIC_ITERATION_MARKS() => LB_ID\fR" 4
.IX Item "IDEOGRAPHIC_ITERATION_MARKS() => LB_ID"
表語文字的な繰り返し記号。
U+3005 繰返し記号、U+303B ゆすり点、U+309D 平仮名繰返し記号、U+309E 平仮名繰返し記号 (濁点)、U+30FD 片仮名繰返し記号、U+30FE 片仮名繰返し記号 (濁点)。
.Sp
注。仮名ではないものもある。
.ie n .IP """KANA_SMALL_LETTERS() => LB_ID""" 4
.el .IP "\f(CWKANA_SMALL_LETTERS() => LB_ID\fR" 4
.IX Item "KANA_SMALL_LETTERS() => LB_ID"
.PD 0
.ie n .IP """KANA_PROLONGED_SOUND_MARKS() => LB_ID""" 4
.el .IP "\f(CWKANA_PROLONGED_SOUND_MARKS() => LB_ID\fR" 4
.IX Item "KANA_PROLONGED_SOUND_MARKS() => LB_ID"
.PD
小書き仮名。
小書き平仮名 U+3041 ぁ, U+3043 ぃ, U+3045 ぅ, U+3047 ぇ, U+3049 ぉ, U+3063 っ, U+3083 ゃ, U+3085 ゅ, U+3087 ょ, U+308E ゎ, U+3095 ゕ, U+3096 ゖ。
小書き片仮名 U+30A1 ァ, U+30A3 ィ, U+30A5 ゥ, U+30A7 ェ, U+30A9 ォ, U+30C3 ッ, U+30E3 ャ, U+30E5 ュ, U+30E7 ョ, U+30EE ヮ, U+30F5 ヵ, U+30F6 ヶ。
片仮名表音拡張 U+31F0 ㇰ \- U+31FF ㇿ。
小書き片仮名 (代替名称) U+FF67 ｧ \- U+FF6F ｯ。
.Sp
長音記号。
U+30FC 長音記号、U+FF70 長音記号 (代替名称)。
.Sp
注。これらの文字は行頭禁則文字と扱われることも、通常の表語文字的な文字と扱われることもある。[\s-1JIS X 4051\s0] 6.1.1、[\s-1JLREQ\s0] 3.1.7 や [\s-1UAX14\s0] を参照。
.Sp
注。U+3095 ゕ, U+3096 ゖ, U+30F5 ヵ, U+30F6 ヶ は仮名ではないとされる。
.ie n .IP """MASU_MARK() => LB_ID""" 4
.el .IP "\f(CWMASU_MARK() => LB_ID\fR" 4
.IX Item "MASU_MARK() => LB_ID"
U+303C ます記号。
.Sp
注。この文字は仮名ではないが、通常 \f(CW"ます"\fR や \f(CW"マス"\fR の略記として用いられる。
.Sp
注。この文字は [\s-1UAX\s0 #14] では行頭禁則文字 (\s-1NS\s0) に分類されるが、[\s-1JIS X 4051\s0] や [\s-1JLREQ\s0] では文字クラス (13) や cl\-19 (\s-1ID\s0 に相当) に分類される。
.PP
曖昧な引用符
.IX Subsection "曖昧な引用符"
.PP
初期値では、若干の記号を曖昧な引用符 (\s-1QU\s0) と扱う。
.ie n .IP """BACKWARD_QUOTES() => LB_OP, FORWARD_QUOTES() => LB_CL""" 4
.el .IP "\f(CWBACKWARD_QUOTES() => LB_OP, FORWARD_QUOTES() => LB_CL\fR" 4
.IX Item "BACKWARD_QUOTES() => LB_OP, FORWARD_QUOTES() => LB_CL"
ある言語 (オランダ語、英語、イタリア語、ポルトガル語、スペイン語、トルコ語、
および東アジアの多くの言語) では、開き記号に 9 が回転した形状の引用符
(‘ “) を、閉じ記号に 9 の形状の引用符
(’ ”) を用いる。
.ie n .IP """FORWARD_QUOTES() => LB_OP, BACKWARD_QUOTES() => LB_CL""" 4
.el .IP "\f(CWFORWARD_QUOTES() => LB_OP, BACKWARD_QUOTES() => LB_CL\fR" 4
.IX Item "FORWARD_QUOTES() => LB_OP, BACKWARD_QUOTES() => LB_CL"
ほかの言語 (チェコ語、ドイツ語、スロヴァク語) では、9 の形状の引用符
(’ ”) を開き記号に、9 が回転した形状の引用符
(‘ “) を閉じ記号に用いる。
.ie n .IP """BACKWARD_GUILLEMETS() => LB_OP, FORWARD_GUILLEMETS() => LB_CL""" 4
.el .IP "\f(CWBACKWARD_GUILLEMETS() => LB_OP, FORWARD_GUILLEMETS() => LB_CL\fR" 4
.IX Item "BACKWARD_GUILLEMETS() => LB_OP, FORWARD_GUILLEMETS() => LB_CL"
フランス語、ギリシャ語、ロシア語などでは、左向きのギュメ
(« ‹) を開き記号に、右向きのギュメ
(» ›) を閉じ記号に用いる。
.ie n .IP """FORWARD_GUILLEMETS() => LB_OP, BACKWARD_GUILLEMETS() => LB_CL""" 4
.el .IP "\f(CWFORWARD_GUILLEMETS() => LB_OP, BACKWARD_GUILLEMETS() => LB_CL\fR" 4
.IX Item "FORWARD_GUILLEMETS() => LB_OP, BACKWARD_GUILLEMETS() => LB_CL"
ドイツ語やスロヴァク語では、右向きのギュメ (» ›)
を開き記号に、左向きのギュメ (« ‹) を閉じ記号に用いる。
.PP
デーン語、フィン語、ノルウェー語、スウェーデン語では、9 の形状の引用符や
右向きのギュメ (’ ” » ›)
を開き記号にも閉じ記号にも用いる。
.PP
和字間隔
.IX Subsection "和字間隔"
.ie n .IP """IDEOGRAPHIC_SPACE() => LB_BA""" 4
.el .IP "\f(CWIDEOGRAPHIC_SPACE() => LB_BA\fR" 4
.IX Item "IDEOGRAPHIC_SPACE() => LB_BA"
U+3000 和字間隔が行頭に来ないようにする。
これが初期の挙動である。
.ie n .IP """IDEOGRAPHIC_SPACE() => LB_ID""" 4
.el .IP "\f(CWIDEOGRAPHIC_SPACE() => LB_ID\fR" 4
.IX Item "IDEOGRAPHIC_SPACE() => LB_ID"
和字間隔が行頭に来ることがある。
Unicode 6.2以前はこれが初期の挙動であった。
.ie n .IP """IDEOGRAPHIC_SPACE() => LB_SP""" 4
.el .IP "\f(CWIDEOGRAPHIC_SPACE() => LB_SP\fR" 4
.IX Item "IDEOGRAPHIC_SPACE() => LB_SP"
和字間隔が行頭に来ず、行末でははみ出すようにする。
.PP
\fIEast_Asian_Width 特性\fR
.IX Subsection "East_Asian_Width 特性"
.PP
ラテン、ギリシア、キリルの各用字系では、特定の文字が曖昧 (A) の East_Asian_Width 特性を持っている。このため、こういった文字は \f(CW"EASTASIAN"\fR 文脈で広い文字と扱われる。
\&\f(CW\*(C`EAWidth => [ AMBIGUOUS_\*(C'\fR*\f(CW\*(C`() => EA_N ]\*(C'\fR と指定することで、そのような文字を常に狭い文字と扱う。
.ie n .IP """AMBIGUOUS_ALPHABETICS() => EA_N""" 4
.el .IP "\f(CWAMBIGUOUS_ALPHABETICS() => EA_N\fR" 4
.IX Item "AMBIGUOUS_ALPHABETICS() => EA_N"
下記の文字すべてを East_Asian_Width 特性 N (中立) の文字と扱う。
.ie n .IP """AMBIGUOUS_CYRILLIC() => EA_N""" 4
.el .IP "\f(CWAMBIGUOUS_CYRILLIC() => EA_N\fR" 4
.IX Item "AMBIGUOUS_CYRILLIC() => EA_N"
.PD 0
.ie n .IP """AMBIGUOUS_GREEK() => EA_N""" 4
.el .IP "\f(CWAMBIGUOUS_GREEK() => EA_N\fR" 4
.IX Item "AMBIGUOUS_GREEK() => EA_N"
.ie n .IP """AMBIGUOUS_LATIN() => EA_N""" 4
.el .IP "\f(CWAMBIGUOUS_LATIN() => EA_N\fR" 4
.IX Item "AMBIGUOUS_LATIN() => EA_N"
.PD
曖昧 (A) の幅を持つキリル、ギリシア、ラテン用字系の文字を中立 (N) の文字と扱う。
.PP
いっぽう、東アジアの符号化文字集合に対する多くの実装でたびたび広い文字に描画されてきたにもかかわらず、Unicode 標準では全角 (F) の互換文字を持つがゆえに狭い (Na) 文字とされている文字が若干ある。EAWidth オプションに以下のように指定することで、これらの文字を \f(CW"EASTASIAN"\fR 文脈で広い文字と扱える。
.ie n .IP """QUESTIONABLE_NARROW_SIGNS() => EA_A""" 4
.el .IP "\f(CWQUESTIONABLE_NARROW_SIGNS() => EA_A\fR" 4
.IX Item "QUESTIONABLE_NARROW_SIGNS() => EA_A"
U+00A2 セント記号、U+00A3 ポンド記号、U+00A5 円記号 (または元記号)、U+00A6 破断線、U+00AC 否定、U+00AF マクロン。
.SS "設定ファイル"
.IX Subsection "設定ファイル"
\&\*(L"new\*(R" メソッドおよび \*(L"config\*(R" メソッドのオプション引数の組み込み初期値は、 設定ファイルで上書きできる。
\&\fIUnicode/LineBreak/Defaults.pm\fR。
詳細は \fIUnicode/LineBreak/Defaults.pm.sample\fR を読んでほしい。
.SH "BUGS"
.IX Header "BUGS"
バグやバグのような動作は、開発者に教えてください。
.PP
\&\s-1CPAN\s0 Request Tracker:
<http://rt.cpan.org/Public/Dist/Display.html?Name=Unicode\-LineBreak>.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$VERSION\fR 変数を参照してほしい。
.SS "非互換な変更"
.IX Subsection "非互換な変更"
.IP "2012.06" 4
.IX Item "2012.06"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\fIeawidth()\fR メソッドを廃止した。
代わりに \*(L"columns\*(R" in Unicode::GCString が使えるかもしれない。
.IP "\(bu" 4
\&\fIlbclass()\fR メソッドを廃止した。
\&\*(L"lbc\*(R" in Unicode::GCString や \*(L"lbcext\*(R" in Unicode::GCString
を使ってほしい。
.RE
.RS 4
.RE
.SS "標準への適合性"
.IX Subsection "標準への適合性"
このモジュールで用いている文字の特性値は、Unicode 標準 8.0.0版による。
.PP
このモジュールでは、実装水準 \s-1UAX14\-C2\s0 を実装しているつもり。
.SH "IMPLEMENTATION NOTES"
.IX Header "IMPLEMENTATION NOTES"
.IP "\(bu" 4
一部の表語文字的な文字を \s-1NS\s0 として扱うか \s-1ID\s0 として扱うかを選べる。
.IP "\(bu" 4
ハングル音節およびハングル連結チャモを \s-1ID\s0 として扱うか \s-1AL\s0 として扱うかを選べる。
.IP "\(bu" 4
\&\s-1AI\s0 に分類される文字を \s-1AL\s0 と \s-1ID\s0 のどちらに解決するかを選べる。
.IP "\(bu" 4
\&\s-1CB\s0 に分類される文字は解決しない。
.IP "\(bu" 4
\&\s-1CJ\s0 に分類される文字は常に \s-1NS\s0 に解決する。より柔軟な手直しの機構が提供される。
.IP "\(bu" 4
東南アジアの表記体系の単語分節に対応しない場合は、
\&\s-1SA\s0 に分類される文字は \s-1AL\s0 に解決する。
ただし、Grapheme_Cluster_Break 特性の値が Extend か SpacingMark である文字は \s-1CM\s0 に解決する。
.IP "\(bu" 4
\&\s-1SG\s0 や \s-1XX\s0 に分類される文字は \s-1AL\s0 に解決する。
.IP "\(bu" 4
以下の \s-1UCS\s0 の範囲にあるコードポイントは、文字が割り当てられていなくても決まった特性値を持つ。
.Sp
.Vb 10
\&    範囲               | UAX #14    | UAX #11    | 説明
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    U+20A0..U+20CF     | PR [*1]    | N [*2]     | 通貨記号
\&    U+3400..U+4DBF     | ID         | W          | CJK漢字
\&    U+4E00..U+9FFF     | ID         | W          | CJK漢字
\&    U+D800..U+DFFF     | AL (SG)    | N          | サロゲート
\&    U+E000..U+F8FF     | AL (XX)    | F か N (A) | 私用領域
\&    U+F900..U+FAFF     | ID         | W          | CJK漢字
\&    U+20000..U+2FFFD   | ID         | W          | CJK漢字
\&    U+30000..U+3FFFD   | ID         | W          | 古漢字
\&    U+F0000..U+FFFFD   | AL (XX)    | F か N (A) | 私用領域
\&    U+100000..U+10FFFD | AL (XX)    | F か N (A) | 私用領域
\&    その他未割り当て   | AL (XX)    | N          | 未割り当て、
\&                       |            |            | 予約、非文字
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    [*1] U+20A7 ペセタ記号 (PO)、U+20B6 トゥール・リーヴル記号 
\&      (PO)、U+20BB スカンディナヴィア・マルク記号 (PO)、U+20BE
\&      ラリ記号 (PO) を除く。
\&    [*2] U+20A9 ウォン記号 (H)、U+20AC ユーロ記号 (F か N (A)) を
\&      除く。
.Ve
.IP "\(bu" 4
一般カテゴリ特性が Mn、Me、Cc、Cf、Zl、Zp のいずれかである文字は、前進を伴わない文字とみなす。
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "[\s-1CMOS\s0]" 4
.IX Item "[CMOS]"
\&\fIThe Chicago Manual of Style\fR, 15th edition.
University of Chicago Press, 2003.
.IP "[\s-1JIS X 4051\s0]" 4
.IX Item "[JIS X 4051]"
\&\s-1JIS X 4051:2004\s0
\&\fI日本語文書の組版方法\fR.
日本規格協会, 2004.
.IP "[\s-1JLREQ\s0]" 4
.IX Item "[JLREQ]"
阿南康宏他.
\&\fI日本語組版処理の要件\fR, 
W3C 技術ノート 2012年4月3日.
<http://www.w3.org/TR/2012/NOTE\-jlreq\-20120403/ja/>.
.IP "[\s-1UAX\s0 #11]" 4
.IX Item "[UAX #11]"
A. Freytag (ed.) (2008\-2009).
\&\fIUnicode Standard Annex #11: East Asian Width\fR, Revisions 17\-19.
<http://unicode.org/reports/tr11/>.
.IP "[\s-1UAX\s0 #14]" 4
.IX Item "[UAX #14]"
A. Freytag and A. Heninger (eds.) (2008\-2015).
\&\fIUnicode Standard Annex #14: Unicode Line Breaking Algorithm\fR, Revisions 22\-35.
<http://unicode.org/reports/tr14/>.
.IP "[\s-1UAX\s0 #29]" 4
.IX Item "[UAX #29]"
Mark Davis (ed.) (2009\-2013).
\&\fIUnicode Standard Annex #29: Unicode Text Segmentation\fR, Revisions 15\-23.
<http://www.unicode.org/reports/tr29/>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::LineFold~[ja],
Text::Wrap,
Unicode::GCString~[ja].
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2009\-2017 Hatuka*nezumi \- \s-1IKEDA\s0 Soji <hatuka(at)nezumi.nu>.
.PP
This program is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.
