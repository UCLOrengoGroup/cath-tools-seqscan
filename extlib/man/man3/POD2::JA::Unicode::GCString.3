.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "POD2::JA::Unicode::GCString 3"
.TH POD2::JA::Unicode::GCString 3 "2017-04-11" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Unicode::GCString~[ja] \- UAX #29 書記素クラスタの列としての文字列
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Unicode::GCString;
\&    $gcstring = Unicode::GCString\->new($string);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Unicode::GCString はUnicode文字列を、Unicode標準附属書29 [\s-1UAX\s0 #29] で定義される「拡張書記素クラスタ」〔extended grapheme cluster〕の列として扱う。
.PP
\&\fB書記素クラスタ\fR〔grapheme cluster〕は、Unicode文字の列で、ひとつの\fB書記素基底\fR〔grapheme base〕と、付加的な\fB書記素エキステンダ\fR〔grapheme extender〕および/または\fB「前置」文字\fR〔“prepend” character〕から成る。これは人が「文字」とみなすものに近い。
.SS "公開インタフェース"
.IX Subsection "公開インタフェース"
\fIコンストラクタ\fR
.IX Subsection "コンストラクタ"
.IP "new (\s-1STRING,\s0 [\s-1KEY\s0 => \s-1VALUE, ...\s0])" 4
.IX Item "new (STRING, [KEY => VALUE, ...])"
.PD 0
.IP "new (\s-1STRING,\s0 [\s-1LINEBREAK\s0])" 4
.IX Item "new (STRING, [LINEBREAK])"
.PD
\&\fIコンストラクタ\fR。
Unicode文字列 \s-1STRING\s0 から新たに書記素クラスタ文字列
(Unicode::GCString オブジェクト) を作る。
.Sp
\&\s-1KEY\s0 => \s-1VALUE\s0 の対については \*(L"オプション\*(R" in Unicode::LineBreak~[ja]を参照。
第二の形式では、
Unicode::LineBreak~[ja] オブジェクト \s-1LINEBREAK\s0 で分節の仕様を決定する。
.Sp
\&\fB注\fR:
最初の形式はリリース 2012.10 で導入された。
.IP "copy" 4
.IX Item "copy"
\&\fIコピーコンストラクタ\fR。
書記素クラスタ文字列の複製を作る。
新たな文字列では、次の位置は先頭になる。
.PP
\fI長さ\fR
.IX Subsection "長さ"
.IP "chars" 4
.IX Item "chars"
\&\fIインスタンスメソッド\fR。
書記素クラスタ文字列に含まれるUnicode文字の数、つまりUnicode文字列としての長さを返す。
.IP "columns" 4
.IX Item "columns"
\&\fIインスタンスメソッド\fR。
組み込みの文字データベースで決定される書記素クラスタ文字列の桁数を返す。
詳しくは \*(L"\s-1DESCRIPTION\*(R"\s0 in Unicode::LineBreak~[ja] を参照。
.IP "length" 4
.IX Item "length"
\&\fIインスタンスメソッド\fR。
書記素クラスタ文字列に含まれる書記素クラスタの数を返す。
.PP
\fI文字列としての操作\fR
.IX Subsection "文字列としての操作"
.IP "as_string" 4
.IX Item "as_string"
.PD 0
.ie n .IP """""""\s-1OBJECT\s0""""""" 4
.el .IP "\f(CW``\fR\s-1OBJECT\s0\f(CW''\fR" 4
.IX Item """OBJECT"""
.PD
\&\fIインスタンスメソッド\fR。
書記素クラスタ文字列を明示的にUnicode文字列に変換する。
.IP "cmp (\s-1STRING\s0)" 4
.IX Item "cmp (STRING)"
.PD 0
.ie n .IP "\s-1STRING\s0 ""cmp"" \s-1STRING\s0" 4
.el .IP "\s-1STRING\s0 \f(CWcmp\fR \s-1STRING\s0" 4
.IX Item "STRING cmp STRING"
.PD
\&\fIインスタンスメソッド\fR。
文字列を比較する。特に風変わりなところはない。
文字列のどちらかがUnicode文字列でもよい。
.IP "concat (\s-1STRING\s0)" 4
.IX Item "concat (STRING)"
.PD 0
.ie n .IP "\s-1STRING\s0 ""."" \s-1STRING\s0" 4
.el .IP "\s-1STRING\s0 \f(CW.\fR \s-1STRING\s0" 4
.IX Item "STRING . STRING"
.PD
\&\fIインスタンスメソッド\fR。
書記素クラスタ文字列を結合する。
\&\s-1STRING\s0 のどちらかがUnicode文字列でもよい。
結果の文字列の桁数 (\fIcolumns()\fR を参照) や書記素クラスタの数 (\fIlength()\fR を参照) は、ふたつの文字列のそれの和になるとはかぎらないことに注意。
新たな文字列では、次の位置は左辺の文字列にセットされていた位置になる。
.IP "join ([\s-1STRING, ...\s0])" 4
.IX Item "join ([STRING, ...])"
\&\fIインスタンスメソッド\fR。
\&\s-1STRING\s0 を、書記素クラスタ文字列をはさんでつなげる。
\&\s-1STRING\s0 のうちに Unicode文字列があってもよい。
.IP "substr (\s-1OFFSET,\s0 [\s-1LENGTH,\s0 [\s-1REPLACEMENT\s0]])" 4
.IX Item "substr (OFFSET, [LENGTH, [REPLACEMENT]])"
\&\fIインスタンスメソッド\fR。
書記素クラスタ文字列の部分文字列を返す。
\&\s-1OFFSET\s0 と \s-1LENGTH\s0 は書記素クラスタで数える。
\&\s-1REPLACEMENT\s0 を指定すると、部分文字列をそれで置き換える。
\&\s-1REPLACEMENT\s0 は Unicode文字列でもよい。
.Sp
Note:
このメソッドは組み込み関数 \fIsubstr()\fR と異なり、左辺値を返すことはない。
.PP
\fI書記素クラスタの列としての操作\fR
.IX Subsection "書記素クラスタの列としての操作"
.IP "as_array" 4
.IX Item "as_array"
.PD 0
.ie n .IP """@{""\s-1OBJECT\s0""}""" 4
.el .IP "\f(CW@{\fR\s-1OBJECT\s0\f(CW}\fR" 4
.IX Item "@{OBJECT}"
.IP "as_arrayref" 4
.IX Item "as_arrayref"
.PD
\&\fIインスタンスメソッド\fR。
書記素クラスタ文字列を、書記素クラスタの情報の配列に変換する。
.IP "eos" 4
.IX Item "eos"
\&\fIインスタンスメソッド\fR。
現在の位置が書記素クラスタ文字列の最後かどうか調べる。
.IP "item ([\s-1OFFSET\s0])" 4
.IX Item "item ([OFFSET])"
\&\fIインスタンスメソッド\fR。
OFFSET番めの書記素クラスタを返す。
\&\s-1OFFSET\s0 を指定しないと、次の位置の書記素クラスタの情報を返す。
.IP "next" 4
.IX Item "next"
.PD 0
.ie n .IP """<""\s-1OBJECT\s0"">""" 4
.el .IP "\f(CW<\fR\s-1OBJECT\s0\f(CW>\fR" 4
.IX Item "<OBJECT>"
.PD
\&\fIインスタンスメソッド\fR、反復的。
次の位置の書記素クラスタを返し、次の位置をひとつ進める。
.IP "pos ([\s-1OFFSET\s0])" 4
.IX Item "pos ([OFFSET])"
\&\fIインスタンスメソッド\fR。
\&\s-1OFFSET\s0 を指定した場合は、次の位置をそれにする。
書記素クラスタ文字列の次の位置を返す。
.PP
\fIその他\fR
.IX Subsection "その他"
.IP "lbc" 4
.IX Item "lbc"
\&\fIインスタンスメソッド\fR。
最初の書記素クラスタの最初の文字の行分割クラス
(Unicode::LineBreak~[ja] 参照) を返す。
.IP "lbcext" 4
.IX Item "lbcext"
\&\fIインスタンスメソッド\fR。
最後の書記素クラスタの最後の書記素エキステンダの行分割クラス
(Unicode::LineBreak~[ja] 参照) を返す。
書記素エキステンダがないか、またはクラスが \s-1CM\s0 の場合は、
最後の書記素基底の行分割クラスを返す。
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
書記素クラスタを「書記素」と呼ぶべきではない (ラリーはそう呼ぶが)。
.IP "\(bu" 4
Perl の 5.10.1 版あたりでは、Unicode::GCString オブジェクトから Unicode 文字列への暗黙の変換が \f(CW"utf8_mg_pos_cache_update"\fR キャッシュを混乱させることがある。
.Sp
たとえば、つぎのように
.Sp
.Vb 1
\&    $sub = substr($gcstring, $i, $j);
.Ve
.Sp
するかわりに、つぎのようにするとよい。
.Sp
.Vb 1
\&    $sub = substr("$gcstring", $i, $j);
\&
\&    $sub = substr($gcstring\->as_string, $i, $j);
.Ve
.IP "\(bu" 4
このモジュールでは「初期の」書記素クラスタ境界判別アルゴリズムを実装している。
手直し〔tailoring〕の機構にはまだ対応していない。
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$VERSION\fR 変数を参照してほしい。
.SS "非互換な変更"
.IX Subsection "非互換な変更"
.IP "2013.10" 4
.IX Item "2013.10"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\fInew()\fR メソッドは非Unicode文字列を引数に取れるようになった。
その場合、文字列をiso\-8859\-1 (Latin 1) キャラクタセットで復号する。
以前のリリースでは、このメソッドに非Unicodeを入力すると死ぬようになっていた。
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
[\s-1UAX\s0 #29]
Mark Davis (ed.) (2009\-2013).
\&\fIUnicode Standard Annex #29: Unicode Text Segmentation\fR, Revisions 15\-23.
<http://www.unicode.org/reports/tr29/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Hatuka*nezumi \- \s-1IKEDA\s0 Soji <hatuka(at)nezumi.nu>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2013 Hatuka*nezumi \- \s-1IKEDA\s0 Soji.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
